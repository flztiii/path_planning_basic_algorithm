基于栅格的A星搜索算法在思路上与GridDijkstra基本类似，仅仅在其基础上增加了启发函数这一变化。
方法首先找到一个矩形区域，包含全部的障碍物和起终点。根据一定的分辨率，将此区域进行栅格化，判断每一个栅格与障碍物的距离，如果距离小于阈值则将此栅格设置为false，反之为true。随后，从起始点所在的栅格开始，将每一个栅格构造成一个节点。节点拥有位置、到达节点所需代价、到达节点的上一个节点的属性。再此基础上设立两个集合，开放集合openset和关闭集合closeset。将起点栅格加入openset，开始遍历操作:首先从openset中找出代价加上启发最小的节点作为当前搜索节点（代价越小说明起点当当前点所需行为越少，启发计算是通过当前点到目标点的距离得到的，因此启发越小表示离目标越近）。判断这个节点是否为终点节点，如果不是，将其从openset删除，加入closeset；从当前节点开始以固定行为进行探索，将其可达并满足一定条件的节点加入openset；新探索的节点的位置为其所在位置，代价为当前节点的代价加上运动代价，上一个节点为当前节点；加入openset需要满足的条件为，节点是可行的（不在范围外，不是障碍点），节点不在openset中或openset中相同节点代价更高。重复上述过程直到当前探索节点为终点节点。此时，从终点节点向前回溯前一个节点，就可以得到最终的路径。以上方法相比于GridDijkstra方法的优点在于可以利用目标点的信息进行搜索导向，使路径搜索更加快速。